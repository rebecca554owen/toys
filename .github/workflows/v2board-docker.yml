name: v2board-docker

on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Docker image tag,默认为latest'
        required: false
        default: 'v1.0.0'

env:
  REGISTRY_GHCR: ghcr.io
  IMAGE_NAME: ${{ github.repository_owner }}/v2board

jobs:
  build-and-push:
    runs-on: ubuntu-24.04
    strategy:
      fail-fast: false
      matrix:
        platform: [linux/amd64, linux/arm64]
        include:
          - platform: linux/amd64
            platform_name: linux-amd64
          - platform: linux/arm64
            platform_name: linux-arm64

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          path: v2b
          fetch-depth: 1

      - name: Checkout submodules
        uses: actions/checkout@v4
        with:
          repository: wyx2685/v2board
          path: v2b/v2board
          fetch-depth: 1

      - name: Set up QEMU for multi-platform builds
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_GHCR }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Get tag
        id: get-tag
        run: |
          echo "tag=${{ github.event.inputs.tag }}" >> $GITHUB_OUTPUT

      - name: Validate Docker tag
        run: |
          if [[ ! "${{ steps.get-tag.outputs.tag }}" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          echo "错误：标签格式无效，应为v*.*.*"
          exit 1
          fi

      - name: Check file location
        run: |
          echo "当前工作目录: $(pwd)"
          ls -la v2b/  # 检查 v2b/ 下是否有 Dockerfile
          ls -la v2b/v2board/  # 检查子模块是否检出

      - name: Build and push images
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./v2b/Dockerfile
          push: true
          platforms: ${{ matrix.platform }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          tags: |
            ${{ env.REGISTRY_GHCR }}/${{ env.IMAGE_NAME }}:${{ steps.get-tag.outputs.tag }}

      - name: Save digest
        shell: bash
        run: |
          mkdir -p /tmp/digests
          DIGEST=$(docker buildx imagetools inspect ${{ env.REGISTRY_GHCR }}/${{ env.IMAGE_NAME }}:${{ steps.get-tag.outputs.tag }} --format '{{json .Manifest.Digest}}')
          echo $DIGEST > /tmp/digests/${{ matrix.platform_name }}
        env:
          DOCKER_CLI_EXPERIMENTAL: enabled

      - name: Upload digests
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ matrix.platform_name }}
          path: /tmp/digests
          retention-days: 1

  merge:
    runs-on: ubuntu-24.04
    needs: build-and-push
    steps:
      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          pattern: digests-*
          path: /tmp/digests
          merge-multiple: true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_GHCR }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY_GHCR }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=${{ github.event.inputs.tag }}
            type=raw,value=latest

      - name: Create manifest list and push
        working-directory: /tmp/digests
        run: |
          DOCKER_TAGS=$(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON")
          
          DIGEST_AMD64=$(cat linux-amd64 | tr -d '"')
          DIGEST_ARM64=$(cat linux-arm64 | tr -d '"')

          docker buildx imagetools create $DOCKER_TAGS \
            ${{ env.REGISTRY_GHCR }}/${{ env.IMAGE_NAME }}@$DIGEST_AMD64 \
            ${{ env.REGISTRY_GHCR }}/${{ env.IMAGE_NAME }}@$DIGEST_ARM64

      - name: Inspect image
        run: |
          docker buildx imagetools inspect ${{ env.REGISTRY_GHCR }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}
          docker buildx imagetools inspect ${{ env.REGISTRY_GHCR }}/${{ env.IMAGE_NAME }}:latest
